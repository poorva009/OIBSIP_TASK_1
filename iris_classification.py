# -*- coding: utf-8 -*-
"""iris classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1atf4hz3zASqyIl_oWrCStKrBLC0Royyh

.....OASIS INFOBYTE....

...IRIS CLASSIFICATION....TASK-1....
"""

import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import pandas as pd
from sklearn import metrics

data=pd.read_csv('Iris.csv')
print("Top 5 rows of data:")
print(data.head(5))

""" Description and Info about data   

"""

print("Checking Null Values and Datatype of Dataset")
data.info()
print("\nStatistic of Dataset")
data.describe()

"""## ..Find no of samples in each species"""

data['Species'].value_counts()

"""# EDA of Dataset"""

data['SepalLengthCm'].hist(alpha=0.5, color='purple')
plt.title("Histogram of Sepal_Length")
plt.xlabel("Sepal_Length")
plt.ylabel('Count')
plt.show()

data['SepalWidthCm'].hist(alpha=0.5, color='yellow')
plt.title("Histogram of Sepal_Width")
plt.xlabel("Sepal_Width")
plt.ylabel('Count')
plt.show()

data['PetalLengthCm'].hist(alpha=0.5, color='orange')
plt.title("Histogram of Petal_Length")
plt.xlabel("Petal_Length")
plt.ylabel('Count')
plt.show()

data['PetalWidthCm'].hist(alpha=0.5, color='blue')
plt.title("Histogram of Petal_Width")
plt.xlabel("Petal_Width")
plt.ylabel('Count')
plt.show()

color = ['plum','olive','coral']
species = ['Iris-virginica','Iris-versicolor','Iris-setosa']
for i in range(3):
    x = data[data['Species'] == species[i]]
    plt.scatter(x['SepalLengthCm'],x['SepalWidthCm'],c =color[i], label=species[i])
plt.xlabel("Sepal_Lenth")
plt.ylabel("Sepal_Width")
plt.legend()

color = ['plum','olive','coral']
species = ['Iris-virginica','Iris-versicolor','Iris-setosa']
for i in range(3):
    x = data[data['Species'] == species[i]]
    plt.scatter(x['PetalLengthCm'],x['PetalWidthCm'],c =color[i], label=species[i])
plt.xlabel("Petal_Lenth")
plt.ylabel("Petal_Width")
plt.legend()

color = ['plum','olive','coral']
species = ['Iris-virginica','Iris-versicolor','Iris-setosa']
for i in range(3):
    x = data[data['Species'] == species[i]]
    plt.scatter(x['SepalLengthCm'],x['PetalLengthCm'],c =color[i], label=species[i])
plt.ylabel("Petal_Lenth")
plt.xlabel("Sepal_Length")
plt.legend()

color = ['plum','olive','coral']
species = ['Iris-virginica','Iris-versicolor','Iris-setosa']
for i in range(3):
    x = data[data['Species'] == species[i]]
    plt.scatter(x['SepalWidthCm'],x['PetalWidthCm'],c =color[i], label=species[i])
plt.ylabel("Petal_Width")
plt.xlabel("Sepal_Width")
plt.legend()

"""Correlation of Matrix

"""

data.corr()

corr = data.corr()
fig, ax = plt.subplots(figsize=(10,10))
sns.heatmap(corr, annot=True , ax=ax, cmap='Accent')
corr=corr.pivot('SepalLengthCm' ,'SepalWidthCm' , 'Species')

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

data['Species'] = le.fit_transform(data['Species'])
data.head()

"""Model Training"""

from sklearn.model_selection import train_test_split
# print(data.DESCR)
X = data.drop(columns = ['Species'])
Y = data['Species'] 
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.50)

from sklearn.linear_model import LogisticRegression
model=LogisticRegression()

model.fit(x_train, y_train)

print("Accuracy: ", model.score(x_test,y_test)*100)

from sklearn.neighbors import KNeighborsClassifier
model= KNeighborsClassifier(n_neighbors=7)

model.fit(x_train,y_train)
Ypred=model.predict(x_test)
print(Ypred)
M=metrics.confusion_matrix(y_test,Ypred)
print(M)
# print(acurracy_score(y_test , Ypred))


print("Accuracy: ", model.score(x_test,y_test)*100)